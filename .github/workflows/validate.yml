name: Validate Final Submission

on:
  pull_request:
    branches:
      - '**'

jobs:
  validate-submission:
    name: Validate PR
    runs-on: ubuntu-latest

    env:
      TARGET_BRANCH: ${{ secrets.CORRECT_BRANCH }}
      BACKGROUND_COLOR: ${{ secrets.CORRECT_COLOR }}
      HEADER_TEXT: ${{ secrets.CORRECT_HEADER_TEXT }}
      HEADER_SIZE: ${{ secrets.CORRECT_HEADER_SIZE }}
      IMAGE_HASH: ${{ secrets.CORRECT_IMAGE_HASH }}
      IMAGE_NAME: ${{ secrets.CORRECT_IMAGE_NAME }}
      LINK_URL: ${{ secrets.CORRECT_LINK_URL }}
      SECRET_PHRASE: ${{ secrets.CORRECT_PHRASE }}

    steps:
      - name: Check out PR branch
        uses: actions/checkout@v3

      - name: Validate PR Target Branch
        if: ${{ github.base_ref != env.TARGET_BRANCH }}
        run: |
          echo "❌ Invalid branch: This is not the correct submission branch."
          exit 1

      - name: Install BeautifulSoup4
        run: pip install beautifulsoup4 lxml

      - name: ✅ Check Background Color
        run: |
          python3 <<'EOF'
          import sys
          import re
          from bs4 import BeautifulSoup
  
          expected_color = os.environ["BACKGROUND_COLOR"]

          with open("index.html", "r") as f:
            soup = BeautifulSoup(f, "lxml")
  
          style_tags = soup.find_all("style")
          background_color = None

          for style in style_tags:
            match = re.search(r'background-color:\s*(#[0-9a-fA-F]{6})', style.text)
            if match:
              background_color = match.group(1)
              break

          print(f"Found background color: {background_color}")
          print(f"Expected background color: {expected_color}")
          
          if background_color != expected_color:
              print("❌ Background color does not match.")
              sys.exit(1)
          else:
            print("✅ Background color matches.")
            EOF

      - name: ✅ Check Header Tag Level
        run: |
          TAG_LEVEL=$(pup 'h1,h2,h3,h4,h5,h6' < index.html | grep -B1 "$HEADER_TEXT" | grep -oP '<h\K[1-6](?=>)' | head -n1)
          
          echo "Found header tag level: h$TAG_LEVEL"
          echo "Expected header tag level: h$HEADER_SIZE"
          
          if [ "$TAG_LEVEL" != "$HEADER_SIZE" ]; then
            echo "❌ Header tag level is incorrect."
            exit 1
          else:
            echo "✅ Header tag level is correct."
          fi

      - name: ✅ Check Header Text
        run: |
          HEADER_FOUND=$(pup 'h1,h2,h3,h4,h5,h6 text{}' < index.html | grep -F "$HEADER_TEXT" | head -n1)
          
          echo "Looking for header text: $HEADER_TEXT"
          echo "Found header content: $HEADER_FOUND"
          
          if [ "$HEADER_FOUND" != "$HEADER_TEXT" ]; then
            echo "❌ Header text does not match."
            exit 1
          else:
            echo "✅ Header text matches."
          fi

      - name: ✅ Placeholder - Validate Image Tag & Link
        run:
          echo "Validate image name, base64, and wrapping link"

      - name: ✅ Placeholder - Check PR Secret Phrase
        run:
          echo "Validate PR message format"

      - name: ✅ Placeholder - Check Submission Lockout
        run:
          echo "Lockout if winner already declared"
